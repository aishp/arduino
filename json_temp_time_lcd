/*
Reads temperature from LM35
Displays temp and time on LCD, Serial Monitor
Sends temp as JSON over HTTP to server running on mac
*/
//lcd Ywrobot Arduino lcm1602 iic v1
//Connect GND, VCC, SDA and SCL from lcd to corresponding pins on arduino (only these pins need to be connected)
//temp sensor: lm35
//facing flat side of temp sensor: left to +5, middle to analog input(A0 to A5), right pin to GND

#include <EthernetV2_0.h>
#include <SPI.h>
#include "Time.h"
#include <Wire.h>  
#include <LiquidCrystal_I2C.h> // download library if not available
#include<stdio.h>
#include<stdlib.h>

#define SDCARD_CS 4

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
float temp;
time_t tm;
int tempPin=1;//corresponds to a2, 0 corresponds to a1
char tempchar[10];
char timechar[10];

//conection related stuff
byte mac[] = { 0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x02 };
byte ip[]      = { 192, 168,   1,  199 }; 
byte gateway[] = { 192, 168,   1,  1 };   
byte subnet[]  = { 255, 255, 255,   0 };   
IPAddress server(192,168,1,33);
IPAddress ip_temp;
char *json_format = "{\"timestamp\": %s, value: %d}";
int json_length=0;
char *sample_json="\"on\":false";
int connect_ret;
EthernetClient client;
//char temp_str[4096];

void setup()   /*----( SETUP: RUNS ONCE )----*/
{
  //deselect SD card
  pinMode(SDCARD_CS,OUTPUT);
  digitalWrite(SDCARD_CS,HIGH);//Deselect the SD card
  
  Serial.begin(9600);  // Used to type in characters
  delay(1000);
  
  lcd.begin(16,2);   // initialize the lcd for 16 chars 2 lines, turn on backlight
  lcd.clear();
  
 // Ethernet.begin(mac);
 
  if(Ethernet.begin(mac)==0)
 {
   Serial.println("Unable to assign IP using DHCP"); 
   Ethernet.begin(mac, ip, gateway, subnet);
 
 
 
  Serial.print("My IP address: ");
  ip_temp = Ethernet.localIP();
  for (byte thisByte = 0; thisByte < 4; thisByte++) {
    // print the value of each byte of the IP address:
    Serial.print(ip_temp[thisByte], DEC);
    Serial.print("."); 
  }
 
  Serial.println();
  
   
}
}

int conn()
{
  connect_ret=client.connect(server,8080);
Serial.print("Return from connect:");
Serial.println(connect_ret);
return connect_ret;
}


void loop()   /*----( LOOP: RUNS CONSTANTLY )----*/
{
  temp = analogRead(tempPin);
  tm=now();
  temp = temp * 0.48828125;
  dtostrf(temp,4,3,tempchar);//4- num of digits, 3- precision
  dtostrf(tm,4,0,timechar);
  Serial.print("TEMPERATURE = ");
  
  Serial.print(temp);
  Serial.print("*C");
  Serial.println();
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.write("Temp:");
  lcd.setCursor(7,0);
  lcd.write(tempchar);
   lcd.setCursor(0,1);
  lcd.write("Time:");
  lcd.setCursor(7,1);
  lcd.write(timechar);
  
  //connect to server
 
  while(conn()!=1)
   {
     Serial.println("Connection failed. Trying again...");
     delay(1000);
     
   }
  // sprintf(temp_str, "Hello %f",temp);
    json_length=20;
    client.println("PUT / HTTP/1.0");
    client.println("Content-Type: application/json");
    client.println("Connection: Keep-Alive");
   client.print("Content-Length: ");
   client.println(json_length);
    client.println();
   //client.print("{\"Time\":");
  //  client.print(timechar);
 //   client.print(",");
    client.print("\"Temperature\":");
    client.println(tempchar);
  // client.println("}");
    client.println();
    Serial.println("Connection Succesful");
   // Serial.println(temp_str);
    client.stop();

  
  delay(2000);
}/* --(end main loop )-- */

