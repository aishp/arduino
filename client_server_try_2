
//lcd Ywrobot Arduino lcm1602 iic v1
//Connect GND, VCC, SDA and SCL from lcd to corresponding pins on arduino (only these pins need to be connected)
//temp sensor: lm35
//facing flat side of temp sensor: left to +5, middle to analog input(A0 to A5), right pin to GND

//curl -X POST -H "Content-Type:application/json" -d @sample.json http://192.168.1.34

//POST / HTTP/1.1
//User-Agent: curl/7.37.1
//Host: 192.168.1.34
//Accept: */*
//Content-Type:application/json
//Content-Length: 70
//{  "message": "Let's see if this works.",  "subject": "JSON via curl"}

//#include <EthernetV2_0.h>
#include <Ethernet.h>
#include <SPI.h>
#include "Time.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h> // download library if not available
#include <stdio.h>
#include <stdlib.h>
#include "Wire.h"
//#include "RTClib.h"
#define DS1307_ADDRESS 0x68


#define SDCARD_CS 4
//#define ledPin 13


struct report_record
{
    String uuid;
    String ReportResource;
    String *ReportDeliveryLocations;
    String user_agent;
    int MinPeriod;
    int MaxPeriod;
    int ExpireTime;
    int del_num;
    float temp_record;
};


struct report_record record[5]; //storing more records hangs

byte zero = 0x00; //workaround for issue #527

char report[400];
int ch=0;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
time_t tm;
char timechar[10];

int nr; //number of records


int sec;
int mi;; 
int hr; //24 hour time
int weekDay; //0-6 -> sunday - Saturday
int monthDay;
int mnth;
int yr;

char reply[200];
int r=0;

//conection related stuff
byte mac[] = { 0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x02 };
byte ip[]      = { 192, 168,   1,  199 };
byte gateway[] = { 192, 168,   1,  1 };
byte subnet[]  = { 255, 255, 255,   0 };
IPAddress server_ip(192,168,1,33);
IPAddress ip_temp;
int connect_ret;
EthernetClient client;
EthernetServer server(80); 


void setup()  
{
  
    Wire.begin();
    Serial.begin(9600);  // Used to type in characters
    delay(1000);
    Serial.flush();
    Serial.println("Setup");
    //deselect SD card
    pinMode(SDCARD_CS,OUTPUT);
    digitalWrite(SDCARD_CS,HIGH);//Deselect the SD card
    
    lcd.begin(16,2);   // initialize the lcd for 16 chars 2 lines, turn on backlight
    lcd.clear();
   
    
    if(Ethernet.begin(mac)==0)
    {
        Serial.println("Unable to assign IP using DHCP");
        Ethernet.begin(mac, ip, gateway, subnet);
        
    }
    
    server.begin();
        
        
        //Serial.print("My IP address: ");
        Serial.print("Arduino's IP:");
        ip_temp = Ethernet.localIP();
        for (byte thisByte = 0; thisByte < 4; thisByte++)
        {
            // print the value of each byte of the IP address:
            Serial.print(ip_temp[thisByte], DEC);
            Serial.print(".");
        }
        
        Serial.println();
        
        printDate();
        zone_connect();  
}


int conn()
{
connect_ret=client.connect(server_ip,8080);
Serial.print("Return from connect:");
Serial.println(connect_ret);
return connect_ret;
}

void zone_connect() //function to establish contact with the Zone Controller
{
  while (conn()!=1);
   
    //create JSON Object
    
    String buf= String("{\"UUID\":");
    String s1 = String("\"ab7ce619-80a9-11e4-ba18-28cfe91cf4ef\",");
    buf=buf+s1;
    s1=String("\"Name\": \"");
    buf=buf+s1;
    s1= String("Economizer\",");
    buf=buf+s1;
    s1=String("\"Date\": \"");
    buf=buf+s1;
    s1= String(yr,DEC);
    buf=buf+s1;
    s1="/";
    buf=buf+s1;
    s1=String(mnth,DEC);
    buf=buf+s1;
     s1="/";
    buf=buf+s1;
    s1=String(monthDay,DEC);
    buf=buf+s1;
    s1="\", \"Time\": \"";
    buf=buf+s1;
    s1= String(hr,DEC);
    buf=buf+s1;
    s1=":";
    buf=buf+s1;
    s1=String(mi,DEC);
    buf=buf+s1;
     s1=":";
    buf=buf+s1;
    s1=String(sec,DEC);
    buf=buf+s1;
    s1="\"}";
    buf=buf+s1;
    
    
    Serial.println("Connection Established with Zone Controller:");
    //see if JSON object format is proper
    Serial.println(buf);
    int len=buf.length();
    //start sending client data
    client.println("POST /actuators HTTP/1.0");
    client.println("Content-Type: application/json");
    client.println("Connection: Keep-Alive");
    client.print("Content-Length: ");
    client.println(len);
    client.println();
    
  
    
   client.println(buf);
   
    
    Serial.println("Connection Succesful");
  
  Serial.println();
 /*
  Serial.println("Printing response:");
   
    while(client.available())
    { 
      reply[r]=client.read();
      reply[r+1]='\0';
      r++;
      
    }
    r=0;
    Serial.println(reply);
  */
  client.stop();
   
   
}
void parse_header()
{
  char *next_token;
 // char **rem;
  
  Serial.println("Inside parse header");
  
  next_token = strtok(report, "\" :\r\n");
  
  while(next_token!=NULL) 
  {
  
    
   while(*next_token==' ')
   {
     next_token++;
   }  
   //Serial.println(next_token);
   
     
    // String str = String(next_token);
     
   if((strcmp(next_token,"Hour"))==0)
     {
       
       
      next_token=strtok(NULL, "{}\" ,:\r\n");
      Serial.print("The hour is:");
      Serial.println(next_token);
     // record[nr].user_agent=String(strtok(NULL,"\r\n"));
      //Serial.print("Record[nr].user_agent:");
     //  Serial.println(record[nr].user_agent);
     }
     
     else if((strcmp(next_token,"uuid"))==0)
     {     
      //record[nr].uuid=String(strtok(NULL,"{} ,:\r\n"));
      //Serial.println(record[nr].uuid);
     }
     
     else if((strcmp(next_token,"ReportResource"))==0)
     {     
      //record[nr].ReportResource=String(strtok(NULL,"{}\" ,:\r\n"));
     }
     
     next_token=strtok(NULL, "{}\" ,:\r\n");
 
  }
  
}

byte bcdToDec(byte val)  {
// Convert binary coded decimal to normal decimal numbers
  return ( (val/16*10) + (val%16) );
}

void printDate(){

  // Reset the register pointer
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire.write(zero);
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);

  sec = bcdToDec(Wire.read());
  mi = bcdToDec(Wire.read()); 
  hr = bcdToDec(Wire.read() & 0b111111); //24 hour time
  weekDay = bcdToDec(Wire.read()); //0-6 -> sunday - Saturday
  monthDay = bcdToDec(Wire.read());
  mnth = bcdToDec(Wire.read());
  yr = bcdToDec(Wire.read());
  
  char  timechar[5];
  
  //print the date EG   3/1/11 23:59:59
 /* Serial.print(month);
  Serial.print("/");
  Serial.print(monthDay);
  Serial.print("/");
  Serial.print(year);
  Serial.print(" ");
  Serial.print(hour);
  Serial.print(":");
  Serial.print(mi);
  Serial.print(":");
  Serial.println(second);*/
  
 
  
    
    lcd.clear();
    
    lcd.setCursor(7,0);
   
  
    dtostrf(monthDay,2,0,timechar);
    lcd.setCursor(6,0);
    lcd.write(timechar);
   
    
    dtostrf(mnth,2,0,timechar);
    lcd.setCursor(3,0);
    lcd.write(timechar);
    lcd.setCursor(5,0);
    lcd.write("/");
    
    dtostrf(yr,2,0,timechar);
    lcd.setCursor(0,0);
    lcd.write(timechar);
    lcd.setCursor(2,0);
    lcd.write("/");
    
    dtostrf(hr,2,0,timechar);
    lcd.setCursor(0,1);
    lcd.write(timechar);
    lcd.setCursor(2,1);
    lcd.write(":");
    
    dtostrf(mi,2,0,timechar);
    lcd.setCursor(3,1);
    lcd.write(timechar); 
    lcd.setCursor(5,1);
    lcd.write(":");
    
    dtostrf(sec,2,0,timechar);
    lcd.setCursor(6,1);
    lcd.write(timechar);

}

void loop()
{
  Serial.flush();
  printDate();
  
  //Serial.println("Loop");
  
  
    client=server.available(); // listen for incoming clients
    
    if(client)
    {
    
        Serial.println("New client");
      
            while(client.available())
            {
              
                char c=client.read();
                Serial.write(c);
                report[ch]=c;
                report[ch+1]='\0';
                ch++;
                
                 
            } // client.available()
            Serial.println();
            ch=0;
            
            client.println("HTTP/1.1 200 OK");
    //prints the content stored in report
   /* 
     for(int i=0;i< ch;i++)
     {
       Serial.write(report[i]);
     }
     
     Serial.println();
     */ 
     
     if(strstr(report, "POST")!=NULL)
     {
       Serial.println("Parsing Header...");
       parse_header();
       
     }
    
    
     else
     {
       Serial.println("Not POST");
       
     }//Is a POST Request
       
       
    }//if(client)
    
        
        delay(1000);
   
   
    
} // end of loop1
