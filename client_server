
//lcd Ywrobot Arduino lcm1602 iic v1
//Connect GND, VCC, SDA and SCL from lcd to corresponding pins on arduino (only these pins need to be connected)
//temp sensor: lm35
//facing flat side of temp sensor: left to +5, middle to analog input(A0 to A5), right pin to GND

#include <EthernetV2_0.h>
#include <SPI.h>
#include "Time.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h> // download library if not available
#include <stdio.h>
#include <stdlib.h>

#define SDCARD_CS 4
#define ledPin 13

struct report_record
{
    String uuid;
    String ReportResource;
    String *ReportDeliveryLocations;
    int MinPeriod;
    int MaxPeriod;
    int ExpireTime;
    int del_num;
    
    int timer_value;
    int max_value;
    int exp_value;
    float temp_record;
};

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
float temp;
time_t tm;
int tempPin=1;//corresponds to a2, 0 corresponds to a1
char tempchar[10];
char timechar[10];

//timer
int timer1_counter;

//conection related stuff
byte mac[] = { 0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x02 };
byte ip[]      = { 192, 168,   1,  199 };
byte gateway[] = { 192, 168,   1,  1 };
byte subnet[]  = { 255, 255, 255,   0 };
IPAddress server_ip(192,168,1,33);
IPAddress ip_temp;
char *json_format = "{\"timestamp\": %s, value: %d}";
int json_length=0;
char *sample_json="\"on\":false";
int connect_ret;
EthernetClient client;
EthernetServer server(80);

char *report_head;//append characters to report
char *report= report_head;//keep track of report head
char *report_rem; //remaining part of string after finding token through strtok_r
boolean currentLineIsBlank;
char *next_token; //value returned from strtok_r
struct report_record reports[10];
int report_num=-1;
//char temp_str[4096];

void setup()   /*----( SETUP: RUNS ONCE )----*/
{
  
    Serial.begin(9600);  // Used to type in characters
    delay(1000);
    Serial.println("Setup");
    //deselect SD card
    pinMode(SDCARD_CS,OUTPUT);
    digitalWrite(SDCARD_CS,HIGH);//Deselect the SD card
    
    lcd.begin(16,2);   // initialize the lcd for 16 chars 2 lines, turn on backlight
    lcd.clear();
    
    //set previous value of temp as 0 for all
    for(int k=0;k<20;k++)
    {
        reports[k].temp_record=0.0;
        reports[k].del_num=0;
        
    }
    
    if(Ethernet.begin(mac)==0)
    {
        Serial.println("Unable to assign IP using DHCP");
        Ethernet.begin(mac, ip, gateway, subnet);
    }
    
        server.begin();
        
        
        //Serial.print("My IP address: ");
        Serial.print("Server is at:");
        ip_temp = Ethernet.localIP();
        for (byte thisByte = 0; thisByte < 4; thisByte++)
        {
            // print the value of each byte of the IP address:
            Serial.print(ip_temp[thisByte], DEC);
            Serial.print(".");
        }
        
        Serial.println();
        
        
    
    
    //setup timer1 interrupts
    pinMode(ledPin, OUTPUT);
    
    setup_timer();
   
}

void setup_timer()
{
   noInterrupts();           // disable all interrupts
    TCCR1A = 0;
    TCCR1B = 0;
    
    // Set timer1_counter to the correct value for our interrupt interval
    //timer1_counter = 64886;   // preload timer 65536-16MHz/256/100Hz
    //timer1_counter = 64286;   // preload timer 65536-16MHz/256/50Hz
  //  timer1_counter = 34286;   // preload timer 65536-16MHz/256/2Hz
  
  timer1_counter = 34286;
    
    TCNT1 = timer1_counter;   // preload timer
    TCCR1B |= (1 << CS10);    // 256 prescaler
    TIMSK1 |= (1 << TOIE1);   // enable timer overflow interrupt
    interrupts();             // enable all interrupts
  
}

void read_temp()
{
    temp = analogRead(tempPin);
    tm=now();
    temp = temp * 0.48828125;
    dtostrf(temp,4,3,tempchar);//4- num of digits, 3- precision
    dtostrf(tm,4,0,timechar);
    
    Serial.print("TEMPERATURE = ");
    Serial.print(temp);
    Serial.print("*C");
    Serial.println();
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.write("Temp:");
    lcd.setCursor(7,0);
    lcd.write(tempchar);
    lcd.setCursor(0,1);
    lcd.write("Time:");
    lcd.setCursor(7,1);
    lcd.write(timechar);
}

void send_data()
{
                json_length=20;
                client.println("PUT / HTTP/1.0");
                client.println("Content-Type: application/json");
                client.println("Connection: Keep-Alive");
                client.print("Content-Length: ");
                client.println(json_length);
                client.println();
                //client.print("{\"Time\":");
                //client.print(timechar);
                //client.print(",");
                client.print("\"Temperature\":");
                client.println(tempchar);
                //client.println("}");
                client.println();
                Serial.println("Connection Succesful");
                //Serial.println(temp_str);
}

ISR(TIMER1_OVF_vect)        // interrupt service routine
{
  
  Serial.println("ISR");
    
    read_temp();
    
    TCNT1 = timer1_counter;   // preload timer
    digitalWrite(ledPin, digitalRead(ledPin) ^ 1);
    
    
    for(int j=0;j<report_num;j++)
    {
        reports[j].timer_value++;
        reports[j].max_value++;
    }
    
    for(int j=0;j<report_num;j++)
    {
        if(reports[j].timer_value==reports[j].MinPeriod)
        {
            reports[j].timer_value=0; //reset timer value to count down to min period
            
            if(temp!=reports[j].temp_record)
            {
                reports[j].temp_record==temp;
                
                //transmit data
                
                //connect to specific server
                for(int m=0;m<reports[j].del_num;m++)
                {
                    while(conn(reports[j].ReportDeliveryLocations[m])!=1)
                    {
                        Serial.println("Connection failed. Trying again...");
                        //delay(1000);
                    }
                    
                   send_data();
                    client.stop();
                }// loop for URL of all resource delivery locations
                
            }//if temp!=record[j].temp_record
            
        }//if minperiod reached
        
        
        if(reports[j].max_value==reports[j].MaxPeriod)
        {
            reports[j].max_value=0; //reset max value
            reports[j].temp_record==temp;
            //transmit data;
            
            for(int m=0;m<reports[j].del_num;m++)
            {
                while(conn(reports[j].ReportDeliveryLocations[m])!=1)
                {
                    Serial.println("Connection failed. Trying again...");
                    //delay(1000);
                }
                
                send_data();
               
                client.stop();
            }// loop for URL of all resource delivery locations
        }
        
        //delete the report record
        if(reports[j].exp_value==reports[j].ExpireTime)
        {
            for(int m=j;m<report_num;m++)
            {
                reports[m]=reports[m=1];
            }
            report_num--;
            
        }//end of expiry period check
        
        
    }//end of j for loop
    
}//end of timer ISR

int conn(String URL)
{
  Serial.println("Conn");
    char charBuf[100];
    URL.toCharArray(charBuf, 50);
    connect_ret=client.connect(charBuf,8080);
    Serial.print("Return from connect:");
    Serial.println(connect_ret);
    return connect_ret;
}

void loop()
{
  
  Serial.println("Loop");
  
  /*
    client=server.available(); // listen for incoming clients
    if(client)
    {
        Serial.println("New client");
        
        currentLineIsBlank=true;
        while(client.connected())
        {
            if(client.available())
            {
                char c=client.read();
                Serial.write(c);
                
                //append the character to the report
                *report_head=c;
                *report_head++;
                *report_head='\0';
                
                if(c=='\0') //end of report request, time to start parsing
                {
                    String request(report);
                    if(request.substring(0,4)=="POST")
                    {
                        
                        do
                        {
                            next_token=strtok_r(report, ":", &report_rem);
                            String str(report_rem);
                            
                            if(str.substring(0)=="uuid")
                            {
                                next_token=strtok_r(report, ",", &report_rem);
                                if(report_rem!='\0')
                                {
                                    String str1(report_rem);
                                    reports[report_num].uuid=str;
                                }
                                else
                                {
                                    Serial.println("Bad Request, UUID Missing");
                                    client.println("HTTP/1.0 400 BAD REQUESTr\nContent-Type:text/plain\r\n\r\n400 Bad Request UUID Missing");
                                    goto next_client;
                                }
                            }
                            
                            if(str.substring(0)=="ReportResource")
                            {
                                next_token=strtok_r(report, ",", &report_rem);
                                if(report_rem!='\0')
                                {
                                    
                                    String str1(report_rem);
                                    reports[report_num].ReportResource=str1;
                                }
                                else
                                {
                                    Serial.println("Bad Request, Report Resource Missing");
                                    client.println("HTTP/1.0 400 BAD REQUESTr\nContent-Type:text/plain\r\n\r\n400 Bad Request ReportResource Missing");
                                    goto next_client;
                                }
                            }
                            
                            if(str.substring(0)=="ReportDeliveryLocation")
                            {
                                next_token=strtok_r(report, ",", &report_rem);
                                if(report_rem!='\0')
                                {
                                    String str1(report_rem);
                                    reports[report_num].ReportDeliveryLocations[reports[report_num].del_num] = str1 +"\n";
                                    reports[report_num].del_num++;
                                }
                                else
                                {
                                    Serial.println("Bad Request, Report Delivery Location Missing");
                                    client.println("HTTP/1.0 400 BAD REQUESTr\nContent-Type:text/plain\r\n\r\n400 Bad Request Report Delivery Location Missing");
                                    goto next_client;
                                }
                            }
                            
                            if(str.substring(0)=="MinPeriod")
                            {
                                next_token=strtok_r(report, ",", &report_rem);
                                if(report_rem!='\0')
                                {
                                    reports[report_num].MinPeriod=atoi(report_rem);
                                }
                                else
                                {
                                    Serial.println("Bad Request, MinPeriod Missing");
                                    client.println("HTTP/1.0 400 BAD REQUESTr\nContent-Type:text/plain\r\n\r\n400 Bad Request MinPeriod Missing");
                                    goto next_client;
                                }
                            }
                            
                            if(str.substring(0)=="MaxPeriod")
                            {
                                next_token=strtok_r(report, ",", &report_rem);
                                if(report_rem!='\0')
                                {
                                    reports[report_num].MaxPeriod=atoi(report_rem);
                                }
                                else 
                                {
                                    Serial.println("Bad Request, MaxPeriod Missing");
                                    client.println("HTTP/1.0 400 BAD REQUESTr\nContent-Type:text/plain\r\n\r\n400 Bad Request MaxPeriod Missing");
                                    goto next_client;
                                }
                            }
                            
                            if(str.substring(0)=="ExpiryPeriod")
                            {
                                next_token=strtok_r(report, ",", &report_rem);
                                if(report_rem!='\0')
                                {
                                    reports[report_num].ExpireTime=atoi(report_rem);
                                }
                                else 
                                {
                                    Serial.println("Bad Request, ExpiryPeriod Missing");
                                    client.println("HTTP/1.0 400 BAD REQUESTr\nContent-Type:text/plain\r\n\r\n400 Bad Request ExpiryPeriod Missing");
                                    goto next_client;
                                }
                            }
                            
                        } while (next_token!='\0');
                        
                        report_num++;
                        
                    }//end of if POST
                    
                    else
                    {
                        Serial.println("Not a POST Request");
                        client.println("HTTP/1.0 405 METHOD NOT ALLOWED\r\nContent-Type:text/plain\r\n\r\n405 Only POST Method Allowed");
                    }
                    
                    
                }// end of if(c=='\0')
                
                report_head=report; //set head back to beginning of report
                
                /*   if (c == '\n') {
                 // you're starting a new line
                 currentLineIsBlank = true;
                 } 
                 else if (c != '\r') {
                 // you've gotten a character on the current line
                 currentLineIsBlank = false;
                 }
         
                 */
                 
                 /*
                 
            } // client.available()
        }//client.connected()
        
        
    next_client:
        delay(1); //give time to transmit the data
        
        client.stop();
        Serial.println("Client disconnected");
        
    }//if(client)
    
    */
    
    
} // end of loop1

